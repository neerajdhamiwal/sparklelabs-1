<?php
/**
 * @file
 * This module adds a new checkout pane with configuration settings to allow
 * users to select a shipping option to add to their order. Store owners
 * can set a price for shipping option .
 */

function upm_commerce_shipping_menu() {

    $items = array();
    $items['admin/commerce/config/shipping-rates'] = array(
        'title' => 'Shipping options',
        'description' => 'Define a Shipping options add rates.',
        'page callback' => 'shipping_option_page_local_callback',
        'access arguments' => array('administer users'),
        'type' => MENU_NORMAL_ITEM,
    );

    $items['admin/commerce/config/shipping-rates/local'] = array(
        'title' => 'Shipping options',
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => -10
    );
    $items['admin/commerce/config/shipping-rates/inter'] = array(
        'title' => 'International',
        'page arguments' => array(5),
        'type' => MENU_LOCAL_TASK,
        'page callback' => 'shipping_option_page_inter_callback',
        'access arguments' => array('administer users'),
    );
    $items['admin/commerce/config/shipping-rates/%/add'] = array(
        'title' => 'Add Shipping options',
        'description' => '',
        'page callback' => 'shipping_option_add_form_callback',
        'access arguments' => array('administer users'),
        'type' => MENU_NORMAL_ITEM,
    );
    $items['admin/commerce/config/shipping-rates/%/edit'] = array(
        'title' => 'Edit Shipping options',
        'description' => '',
        'page arguments' => array(4),
        'page callback' => 'shipping_option_edit_form_callback',
        'access arguments' => array('administer users'),
        'type' => MENU_NORMAL_ITEM,
    );
    $items['admin/commerce/config/shipping-rates/%/delete'] = array(
        'title' => 'Delete Shipping options',
        'description' => '',
        'page arguments' => array(4),
        'page callback' => 'shipping_option_delete_form_callback',
        'access arguments' => array('administer users'),
        'type' => MENU_NORMAL_ITEM,
    );
    return $items;
}

function shipping_option_page_local_callback(){
    $type = 'local';
    $query = db_select('shipping_options', 's')
        ->condition('type', $type)
        ->fields('s' , array('id','label','rate'));
    $results =  $query->execute()->fetchAll();
    return theme('shipping_option_local_page_template',array('output' => $results,'type'=>$type));
}
function shipping_option_page_inter_callback($variable){
    $type = 'inter';
    $query = db_select('shipping_options', 's')
        ->condition('type', $type)
        ->fields('s' , array('id','label','rate'));
    $results =  $query->execute()->fetchAll();
    return theme('shipping_option_inter_page_template',array('output' => $results,'type'=>$type));
}
/*
 * Implementation of hook_theme().
 */
function upm_commerce_shipping_theme(){
    $theme_options['shipping_option_local_page_template'] = array(
        // template file name will be shipping-option-local-page.tpl.php
        'arguments' => array(),
        'template' => 'shipping-option-local-page',
        'variables' => array(),
    );
    $theme_options['shipping_option_inter_page_template'] = array(
        // template file name will be shipping-option-inter-page.tpl.php
        'arguments' => array(),
        'template' => 'shipping-option-inter-page',
        'variables' => array(),
    );
    return $theme_options;
}
function shipping_option_add_form_callback() {
    return drupal_get_form('shipping_option_admin_form');
}
function shipping_option_edit_form_callback($variable) {
    return drupal_get_form('shipping_option_admin_edit_form',$variable);
}
function shipping_option_delete_form_callback($variable) {
    return drupal_get_form('shipping_option_admin_delete_form',$variable);
}

function shipping_option_admin_form($form, &$form_state){
    $type = arg(4);
    $form['shipping_type'] = array(
        '#type' => 'hidden',
        '#default_value' => $type,//$variable['build_info']['args'][0] ,
        '#required' => TRUE,
    );
    $form['label'] = array(
        '#type' => 'textfield',
        '#title' => t('Shipping label'),
        '#required' => TRUE,
        '#size' => 50, // added
        '#maxlength' => 50, // added
    );
    $form['rates'] = array(
        '#type' => 'textfield',
        '#title' => t('Shipping rates'),
        '#required' => TRUE, // Added
        '#size' => 50, // added
        '#maxlength' => 50, // added
    );
    // Adds a simple submit button that refreshes the form and clears its contents -- this is the default behavior for forms.
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Submit',
    );
    return $form;
}
function shipping_option_admin_form_validate($form, &$form_state) {
    if(!is_numeric($form_state['values']['rates'])){
        form_set_error('rates', t('Please enter a numeric value.'));
    }
}

function shipping_option_admin_form_submit($form, &$form_state) {
    $type = $form_state['values']['shipping_type'];
    $rates = number_format($form_state['values']['rates'], 2, '.', '');
    $data = array(
        'label' => $form_state['values']['label'],
        'rate' => $rates,
        'type' => $type
    );
    drupal_write_record('shipping_options', $data);
    drupal_set_message(t('Rates has been added Successfully.'));
    drupal_goto('admin/commerce/config/shipping-rates/'.$type);
}


function shipping_option_admin_edit_form($form_state,$variable) {
    $id = $variable['build_info']['args'][0];
    $slected = db_select('shipping_options', 's')
        ->fields('s' , array('id','label','rate','type'))
        ->condition('id', $id)
        ->execute()
        ->fetchAssoc();
    $form['id'] = array(
        '#type' => 'hidden',
        '#default_value' => $id ,
        '#required' => TRUE,
    );
    $form['shipping_type'] = array(
        '#type' => 'hidden',
        '#default_value' => $slected['type'],//$variable['build_info']['args'][0] ,
        '#required' => TRUE,
    );
    $form['label'] = array(
        '#type' => 'textfield',
        '#title' => t('Shipping label'),
        '#required' => TRUE,
        '#default_value' => $slected['label'],
        '#size' => 50, // added
        '#maxlength' => 50, // added
    );
    $form['rates'] = array(
        '#type' => 'textfield',
        '#title' => t('Shipping rates'),
        '#required' => TRUE, // Added
        '#default_value' => $slected['rate'],
        '#size' => 50, // added
        '#maxlength' => 50, // added
    );
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Submit',
    );
    return $form;
}

function shipping_option_admin_edit_form_validate($form, &$form_state) {
    if(!is_numeric($form_state['values']['rates'])){
        form_set_error('rates', t('Please enter a numeric value.'));
    }
}

function shipping_option_admin_edit_form_submit($form, &$form_state) {
    $id =  $form_state['values']['id'];
    $type = $form_state['values']['shipping_type'];
    $rates = number_format($form_state['values']['rates'], 2, '.', '');
    $data = array(
        'label' => $form_state['values']['label'],
        'rate' => $rates,
        'type' => $type,
    );
    db_update('shipping_options')
        ->fields($data)
        ->condition('id', $id)
        ->execute();
    drupal_set_message(t('Rates has been updated Successfully.'));
    drupal_goto('admin/commerce/config/shipping-rates/'.$type);
}

function shipping_option_admin_delete_form($form_state,$variable) {
    $form['id'] = array(
        '#type' => 'hidden',
        '#value' =>  $variable['build_info']['args'][0]
    );
    $form['markup'] = array(
        '#markup' => '<p>'.t('Are you sure you want to delete this rate ?').'</p>'
    );
    $form['cancel'] = array(
        '#type' => 'submit',
        '#value' => t('Cancel'),
        '#submit' => array('shipping_admin_delete_form_cancel'),
    );
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Delete'),
        '#submit' => array('shipping_admin_delete_form_submit'),
    );
    return $form;
}
function shipping_admin_delete_form_submit($form, &$form_state){
    $id = $form_state['values']['id'];
    $slected = db_select('shipping_options', 's')
        ->fields('s' , array('id','type'))
        ->condition('id', $id)
        ->execute()
        ->fetchAssoc();
    db_delete('shipping_options')
        ->condition('id', $id)
        ->execute();
    drupal_set_message(t('Rates has been deleted Successfully.'));
    drupal_goto('admin/commerce/config/shipping-rates/'.$slected['type']);
}

function shipping_admin_delete_form_cancel($form, &$form_state){
    $id = $form_state['values']['id'];
    $slected = db_select('shipping_options', 's')
        ->fields('s' , array('id','type'))
        ->condition('id', $id)
        ->execute()
        ->fetchAssoc();
    drupal_goto('admin/commerce/config/shipping-rates/'.$slected['type']);
}


/**
 * Implements hook_commerce_line_item_type_info().
 */
function upm_commerce_shipping_commerce_line_item_type_info() {
  return array(
    'shipping_rates' => array(
      'type' => 'shipping_rates',
      'name' => t('Shipping'),
      'description' => t('Line item for shipping options.'),
      'add_form_submit_value' => t('Shipping type'),
      'base' => 'upm_commerce_shipping_commerce_line_item',
      'callbacks' => array(
        'configuration' => 'upm_commerce_shipping_configure_line_item',
      ),
    ),
  );
}

/**
 * Function called by the line item module when it or this module is enabled.
 */
function upm_commerce_shipping_configure_line_item() {

}

/**
 * Implements hook_commerce_checkout_pane_info().
 */
function upm_commerce_shipping_commerce_checkout_pane_info() {
  $panes['commerce_shipping_rates'] = array(
    'title' => t('Shipping service'),
    'page' => 'checkout',
    'weight' => 10,
    'file' => 'upm_commerce_shipping_checkout_pane.inc',
    'base' => 'upm_commerce_shipping_pane',
  );
  return $panes;
}

/**
 * Implements hook_commerce_price_component_type_info().
 */
function upm_commerce_shipping_commerce_price_component_type_info() {
    $query = db_select('shipping_options', 's')
        ->fields('s' , array('id','label'));
    $results =  $query->execute()->fetchAll();
    foreach ($results as $result) {
        $human_readable = $result->label;
        $machine_readable = strtolower($human_readable);
        $machine_readable = preg_replace('@[^a-z0-9_]+@','_',$machine_readable);
        $price[$machine_readable] =  array(
            'title' => 'Shipping - '.  $human_readable,
            'weight' => -40,
        );
    }
  return $price;
}

function upm_commerce_delete_shipping_line_items($order) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $line_item_id = NULL;
  foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
    // If this line item is a shipping line item...
    if ($line_item_wrapper->type->value() == 'shipping_rates') {
      // Store its ID for later deletion and remove the reference from the line
      // item reference field.
      $line_item_id = $line_item_wrapper->line_item_id->value();
      $order_wrapper->commerce_line_items->offsetUnset($delta);
      break;
    }
  }
  // If we found any giftwrap line items...
  if (!empty($line_item_id)) {
    // First save the order to update the line item reference field value.
    commerce_order_save($order);
    // Then delete the line items.
    commerce_line_item_delete($line_item_id);
  }
}

function upm_commerce_shipping_line_item_exists($order) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  foreach ($order_wrapper->commerce_line_items as $line_item_wrapper) {
    // If this line item is a giftwrap line item...
    if ($line_item_wrapper->type->value() == 'shipping_rates') {
        $str = $line_item_wrapper->line_item_label->value();
        $id = end(explode('_',$str));
      return $id;
    }
  }
  return 0;
}



function upm_commerce_get_shipping_line_item_id($order) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  foreach ($order_wrapper->commerce_line_items as $line_item_wrapper) {
    // If this line item is a shipping line item...
    if ($line_item_wrapper->type->value() == 'shipping_rates') {
      return $line_item_wrapper->line_item_id->value();
    }
  }
}


function upm_commerce_shipping_commerce_cp_info() {
    $cart_panes = array();
    $cart_panes['shipping_info'] = array(
        'name' => t('Shipping'),
        'pane callback' => 'commerce_cp_shipping_info_pane',
        'page' => 'cart',
    );
    return $cart_panes;
}


/**
 * shipping info cart pane callback
 */
function commerce_cp_shipping_info_pane($form, $form_state, $cart_order, $pane_weight) {
    $form_pane = array();
    $type = (isset($cart_order->field_shipping_type['und'][0]['value']))? $cart_order->field_shipping_type['und'][0]['value'] : "local";
    $query = db_select('shipping_options', 's')
        ->condition('type', $type)
        ->fields('s' , array('id','label','rate'));
    $results =  $query->execute()->fetchAll();
    $options = array();
    foreach ($results as $result) {
        $human_readable = $result->label;
        $rates = $result->rate;
        $options[$result->id] = $human_readable.": $".$rates;

    }
    $id = upm_commerce_shipping_line_item_exists($cart_order);
    $form_pane['shipping_info'] = array(
        '#type' => 'select',
        '#title'=> t('Shipping'),
        '#default_value' => $id,
        '#options' => $options,
        '#weight' => $pane_weight,
        '#prefix' => '<div id="shipping-info">',
        '#suffix' => '</div>',
        '#ajax' => array(
            'event' => 'change',
            'wrapper' => 'shipping-info',
            'callback' => 'shipping_info_ajax_callback',
        ),
    );
    return $form_pane;
}
function shipping_info_ajax_callback($form, $form_state){
    $order_id =(isset( $form_state['values']['order']->order_id))? $form_state['values']['order']->order_id : $form_state['build_info']['args'][0]->args[0];
    $order = commerce_order_load($order_id);
    $shipping_id = $form_state['triggering_element']['#value'];
    $tax_display_amount = 0.00;
    $tax = 0.0;
    $base_price = 0;
    $discount = 0;
    $shipping = 0;
    $slected = db_select('shipping_options', 's')
        ->fields('s' , array('id','label','rate','type'))
        ->condition('id', $shipping_id)
        ->execute()
        ->fetchAssoc();
    $shipping_label = $slected['label'];
    $shipping_price = $slected['rate'];
    $machine_readable = strtolower($shipping_label);
    $machine_readable = preg_replace('@[^a-z0-9_]+@','_',$machine_readable);
    upm_commerce_delete_shipping_line_items($order);

    // Set the currency code.
    $default_currency_code=commerce_default_currency();
    if ($balance=commerce_payment_order_balance($order)) {
        $default_currency_code=$balance['currency_code'];
    }

    // Create the new line item.
    $line_item=commerce_line_item_new('shipping_rates', $order->order_id);
    // Wrap the line item and order to simplify manipulating their field data.
    $order_wrapper=entity_metadata_wrapper('commerce_order', $order);
    $line_item_wrapper=entity_metadata_wrapper('commerce_line_item', $line_item);
    // Populate the $line_item_wrapper...
    $line_item_wrapper->line_item_label= $machine_readable."_".$shipping_id;
    $line_item_wrapper->quantity=1;
    $line_item_wrapper->commerce_unit_price->amount =  $shipping_price * 100;
    $line_item_wrapper->commerce_unit_price->currency_code = $default_currency_code;
    // Set the price component of the unit price.
    $line_item_wrapper->commerce_unit_price->data=commerce_price_component_add(
        $line_item_wrapper->commerce_unit_price->value(),
        $machine_readable,
        $line_item_wrapper->commerce_unit_price->value(),
        TRUE,
        FALSE
    );
    // Invoke the 'commerce_giftwrap_calculate' event.
    rules_invoke_all('commerce_shipping_rates_calculate', $line_item);
    // Save the incoming line item now so we get its ID.
    commerce_line_item_save($line_item);
    // Add it to the order's line item reference value.
    $order_wrapper->commerce_line_items[]=$line_item;
    // Save the order.
    commerce_order_save($order);

    foreach ($order->commerce_order_total['und'][0]['data']['components'] as $components){
        if($components['name'] == 'base_price'){
            $base_price = $components['price']['amount'];
        }
        else if($components['name'] == 'discount'){
            $discount = $components['price']['amount'];
        }
    }
    foreach($order->commerce_line_items['und'] as $item){
        $line_item = commerce_line_item_load($item['line_item_id']);
        if($line_item->type == 'shipping_rates'){
            $shipping = $line_item->commerce_total['und'][0]['amount'];
        }
        else if($line_item->type == 'tax_rates'){
            $tax = $line_item->commerce_total['und'][0]['amount'];
        }
    }
    $base_price = ($base_price + $discount);
    $subtotal = ($base_price + $tax + $shipping ) / 100;
    $subtotal = number_format($subtotal, 2, '.', '');
    $tax_display_amount = $tax / 100;
    $tax_display_amount = number_format($tax_display_amount, 2, '.', '');
    $commands = array();
    $output = '<table class="commerce-order-handler-area-order-total table-ajax-order-total table ">
    <tr class="component-type-tax-rates">
      <td class="component-title">Sales Tax</td>
      <td class="component-total">$'.$tax_display_amount.'</td>
    </tr>
    <tr class="component-type-commerce-price-formatted-amount">
       <td class="component-title">Subtotal</td>
       <td class="component-total">$'.$subtotal.'</td>
    </tr>
    </table>';
    $commands[] = ajax_command_replace('.commerce-order-handler-area-order-total', $output);
    $element = array(
        '#type' => 'ajax',
        '#commands' => $commands
    );
    return $element;
}